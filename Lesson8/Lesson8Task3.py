# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Запрашивать у пользователя данные и заполнять список необходимо
# только числами. Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу
# скрипта, введя, например, команду «stop». При этом скрипт завершается, сформированный список с числами выводится
# на экран.
# Подсказка: для этого задания примем, что пользователь может вводить только числа и строки.
# Во время ввода пользователем очередного элемента необходимо реализовать проверку типа элемента.
# Вносить его в список, только если введено число. Класс-исключение должен не позволить пользователю ввести текст
# (не число) и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.
class NotNumErr(Exception):
    pass


def num_string_check(string_input):
    test_num_point_num = string_input.split('.')
    num_part = 0
    not_num_part = False
    for el in test_num_point_num:
        if el.isnumeric():
            num_part += 1
        else:
            not_num_part = True
            break
    if num_part <= 2 and not_num_part is False:
        return True
    else:
        return False


res_list = []
a = 0
while a != 'stop':
    a = input("Введите число для добавления в список или 'stop' для завершения программы: ")
    try:
        if num_string_check(a) is False and a != "stop":
            raise NotNumErr('Вы ввели не число')
    except NotNumErr as err:
        print(err)
    else:
        if a != "stop":
            res_list.append(float(a))
else:
    print(res_list)
