# 3. Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только к
# клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток,
# соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух
# клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
# этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
#
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернёт строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернёт строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.
import sys


class Box:

    def __init__(self, num_cells):
        self.num_cells = int(num_cells)

    def __str__(self):
        return f"Клетка c количеством клеток {self.num_cells}"

    def __add__(self, other):
        return Box(self.num_cells + other.num_cells)

    def __sub__(self, other):
        if self.num_cells > other.num_cells:
            return Box(self.num_cells - other.num_cells)
        else:
            sys.exit("Вычитание клеток не может давать отрицательный результат!")

    def __mul__(self, other):
        return Box(self.num_cells * other.num_cells)

    def __truediv__(self, other):
        return Box(self.num_cells // other.num_cells)

    def make_order(self, collums=1):
        i = 0
        for _ in range(0, self.num_cells // collums):
            print("*" * collums)
            i += 1
        print("*" * (self.num_cells - (collums * i)))


a = Box(7)
b = Box(6)
c = Box(2)
basket = a + b + c
print(basket)
a.make_order(3)
basket = a - b + c
print(basket)
basket = a * b - c
print(basket)
basket.make_order(8)
basket = a / b - c
print(basket)
